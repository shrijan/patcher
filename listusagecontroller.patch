diff --git a/docroot/modules/contrib/entity_usage/src/Controller/ListUsageController.php b/docroot/modules/contrib/entity_usage/src/Controller/ListUsageController.php
index 038a7fa..6fa4806 100644
--- a/docroot/modules/contrib/entity_usage/src/Controller/ListUsageController.php
+++ b/docroot/modules/contrib/entity_usage/src/Controller/ListUsageController.php
@@ -179,7 +179,7 @@ class ListUsageController extends ControllerBase {
    *   An indexed array of rows that should be displayed as sources for this
    *   target entity.
    */
-  protected function getRows($entity_type, $entity_id) {
+  public function getRows($entity_type, $entity_id) {
     if (!empty($this->allRows)) {
       return $this->allRows;
       // @todo Cache this based on the target entity, invalidating the cached
@@ -213,20 +213,40 @@ class ListUsageController extends ControllerBase {
           foreach ($records as $key => $record) {
             if ($record['source_vid'] == $default_revision_id && $record['source_langcode'] == $default_langcode) {
               $default_key = $key;
-              $used_in_default = TRUE;
-              break;
+              $entity_revision =\Drupal::entityTypeManager()->getStorage($record['source_type'])->loadRevision($record['source_vid']);
+
+                $used_in_default = TRUE;
+                break;
+              
+              
             }
           }
           $used_in_text = $used_in_default ? $this->t('Default') : $this->t('Translations or previous revisions');
         }
+        //dump('listusagege', $source_entity);
         $link = $this->getSourceEntityLink($source_entity);
         // If the label is empty it means this usage shouldn't be shown
         // on the UI, just skip this row.
+        
         if (empty($link)) {
           continue;
         }
         $published = $this->getSourceEntityStatus($source_entity);
         $field_label = isset($field_definitions[$records[$default_key]['field_name']]) ? $field_definitions[$records[$default_key]['field_name']]->getLabel() : $this->t('Unknown');
+    
+    
+        if(isset($link) && is_object($link) && method_exists($link, 'getText')){
+          $link_text =   $link->getText();
+          if (contains($link_text, 'previous revision')) {
+            $used_in_default = false;
+          }
+        }elseif(!empty($link) && strpos( $link, "Orphaned") !== false){
+          $used_in_default = false;
+        }else{
+          $used_in_default = true;
+        }
+        
+       if($used_in_default){
         $rows[] = [
           $link,
           $entity_types[$source_type]->getLabel(),
@@ -234,13 +254,20 @@ class ListUsageController extends ControllerBase {
           $field_label,
           $published,
           $used_in_text,
-        ];
+        ];}
+        else{
+          $row[] = [];
+        }
       }
     }
-
+   
     $this->allRows = $rows;
     return $this->allRows;
   }
+  
+  protected function contains($haystack, $needle) {
+    return strpos($haystack, $needle) !== false;
+  }
 
   /**
    * Get rows for a given page.
