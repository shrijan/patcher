diff --git a/modules/entity_form/config/schema/entity_browser_entity_form.schema.yml b/modules/entity_form/config/schema/entity_browser_entity_form.schema.yml
index 0a9dcac..39fb42a 100644
--- a/modules/entity_form/config/schema/entity_browser_entity_form.schema.yml
+++ b/modules/entity_form/config/schema/entity_browser_entity_form.schema.yml
@@ -22,3 +22,9 @@ entity_browser.browser.widget.entity_form:
     form_mode:
       type: string
       label: 'Form display mode ID'
+    allowed_bundles:
+      type: sequence
+      label: 'Allowed bundles'
+      sequence:
+        type: string
+        label: 'Bundle'
diff --git a/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php b/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
index 771aeaa..03e8916 100644
--- a/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
+++ b/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
@@ -14,6 +14,7 @@ use Drupal\entity_browser\WidgetValidationManager;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use function array_flip;
 
 /**
  * Provides entity form widget.
@@ -27,6 +28,8 @@ use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
  */
 class EntityForm extends WidgetBase {
 
+  const ALLOW_EDITOR_BUNDLE_SELECTION = '__editor_bundle';
+
   /**
    * The entity type bundle info service.
    *
@@ -92,6 +95,7 @@ class EntityForm extends WidgetBase {
       'entity_type' => NULL,
       'bundle' => NULL,
       'form_mode' => 'default',
+      'allowed_bundles' => [],
     ]);
   }
 
@@ -105,16 +109,46 @@ class EntityForm extends WidgetBase {
 
     $form = parent::getForm($original_form, $form_state, $additional_widget_parameters);
 
+    $bundle = $this->configuration['bundle'];
+    $entity_type_id = $this->configuration['entity_type'];
+    $allowed_bundles = $this->configuration['allowed_bundles'];
+    if ($bundle === self::ALLOW_EDITOR_BUNDLE_SELECTION && ($form_state->get('step') !== 'inline_entity_form' || $form_state->get('entity_type') !== $entity_type_id) && count($allowed_bundles) > 1) {
+      $definitions = $this->entityTypeBundleInfo->getBundleInfo($entity_type_id);
+      $bundles = array_map(function ($item) {
+        return $item['label'];
+      }, $definitions);
+      $title = $this->t('Bundle');
+      if ($bundle_type = $this->entityTypeManager->getDefinition($entity_type_id)->getBundleEntityType()) {
+        $title = $this->entityTypeManager->getDefinition($bundle_type)->getLabel();
+      }
+      $form['bundle'] = [
+        '#type' => 'select',
+        '#options' => array_intersect_key($bundles, array_flip($allowed_bundles)),
+        '#title' => $title,
+        '#required' => TRUE,
+      ];
+      $form['actions']['submit']['#value'] = $this->t('Continue');
+      $form['actions']['submit']['#eb_widget_main_submit'] = FALSE;
+      return $form;
+    }
+
     // Pretend to be IEFs submit button.
     $form['#submit'] = [['Drupal\inline_entity_form\ElementSubmit', 'trigger']];
     $form['actions']['submit']['#ief_submit_trigger'] = TRUE;
     $form['actions']['submit']['#ief_submit_trigger_all'] = TRUE;
 
+    if ($bundle === self::ALLOW_EDITOR_BUNDLE_SELECTION) {
+      $bundle = reset($allowed_bundles);
+      if ($form_state->get('step') === 'inline_entity_form') {
+        $bundle = $form_state->get('bundle');
+      }
+    }
+
     $form['inline_entity_form'] = [
       '#type' => 'inline_entity_form',
       '#op' => 'add',
-      '#entity_type' => $this->configuration['entity_type'],
-      '#bundle' => $this->configuration['bundle'],
+      '#entity_type' => $entity_type_id,
+      '#bundle' => $bundle,
       '#form_mode' => $this->configuration['form_mode'],
     ];
 
@@ -128,11 +162,28 @@ class EntityForm extends WidgetBase {
     return [$form[$form['#browser_parts']['widget']]['inline_entity_form']['#entity']];
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function validate(array &$form, FormStateInterface $form_state) {
+    if ($form_state->get('entity_type') !== $this->configuration['entity_type']) {
+      $form_state->set('step', 'bundle_select ');
+      return;
+    }
+    if ($form_state->get('step') !== 'inline_entity_form') {
+      // Skip form validation if no bundle was selected.
+      return;
+    }
+
+    parent::validate($form, $form_state); // TODO: Change the autogenerated stub
+  }
+
   /**
    * {@inheritdoc}
    */
   public function submit(array &$element, array &$form, FormStateInterface $form_state) {
-    if (!empty($form_state->getTriggeringElement()['#eb_widget_main_submit'])) {
+    $triggering_element = $form_state->getTriggeringElement();
+    if (!empty($triggering_element['#eb_widget_main_submit'])) {
       $entities = $this->prepareEntities($form, $form_state);
       array_walk(
         $entities,
@@ -141,6 +192,19 @@ class EntityForm extends WidgetBase {
         }
       );
       $this->selectEntities($entities, $form_state);
+      return;
+    }
+    if ($this->configuration['bundle'] === self::ALLOW_EDITOR_BUNDLE_SELECTION && $triggering_element_string = (string) $triggering_element['#value']) {
+      if ($triggering_element_string === (string) $this->t('Continue') && $form_state->get('step') !== 'inline_entity_form') {
+        $form_state->set('step', 'inline_entity_form');
+        // Set the bundle as a FormState property. Since we are rebuilding
+        // the form, submitted values will no persist across page requests.
+        $form_state->set('bundle', $form_state->getValue('bundle'));
+
+        $form_state->set('entity_type', $this->configuration['entity_type']);
+        $form_state->setRebuild(TRUE);
+        return;
+      }
     }
   }
 
@@ -153,6 +217,7 @@ class EntityForm extends WidgetBase {
     $parents = ['table', $this->uuid(), 'form'];
     $entity_type = $form_state->hasValue(array_merge($parents, ['entity_type'])) ? $form_state->getValue(array_merge($parents, ['entity_type'])) : $this->configuration['entity_type'];
     $bundle = $form_state->hasValue(array_merge($parents, ['bundle', 'select'])) ? $form_state->getValue(array_merge($parents, ['bundle', 'select'])) : $this->configuration['bundle'];
+    $allowed_bundles = $form_state->hasValue(array_merge($parents, ['bundle', 'allowed_bundles'])) ? $form_state->getValue(array_merge($parents, ['bundle', 'allowed_bundles'])) : $this->configuration['allowed_bundles'];
     $form_mode = $form_state->hasValue(array_merge($parents, ['form_mode', 'form_select'])) ? $form_state->hasValue(array_merge($parents, ['form_mode', 'form_select'])) : $this->configuration['form_mode'];
 
     $definitions = $this->entityTypeManager->getDefinitions();
@@ -187,8 +252,21 @@ class EntityForm extends WidgetBase {
         '#type' => 'select',
         '#title' => $this->t('Bundle'),
         '#options' => $bundles,
+        '#empty_option' => $this->t('Allow the editor to select'),
+        '#empty_value' => self::ALLOW_EDITOR_BUNDLE_SELECTION,
         '#default_value' => $bundle,
       ],
+      'allowed_bundles' => [
+        '#states' => [
+          'visible' => [
+            sprintf(':input[name="table[%s][form][bundle][select]"]', $this->uuid()) => ['value' => self::ALLOW_EDITOR_BUNDLE_SELECTION],
+          ],
+        ],
+        '#type' => 'checkboxes',
+        '#title' => $this->t('Allowed bundles'),
+        '#options' => $bundles,
+        '#default_value' => $allowed_bundles,
+      ],
       '#attributes' => ['id' => 'bundle-wrapper-' . $this->uuid()],
     ];
 
@@ -235,6 +313,10 @@ class EntityForm extends WidgetBase {
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
     parent::submitConfigurationForm($form, $form_state);
+    $this->configuration['allowed_bundles'] = [];
+    if ($this->configuration['bundle']['select'] === self::ALLOW_EDITOR_BUNDLE_SELECTION) {
+      $this->configuration['allowed_bundles'] = array_keys(array_filter($this->configuration['bundle']['allowed_bundles']));
+    }
     $this->configuration['bundle'] = $this->configuration['bundle']['select'];
     $this->configuration['form_mode'] = $this->configuration['form_mode']['form_select'];
   }
@@ -243,9 +325,19 @@ class EntityForm extends WidgetBase {
    * {@inheritdoc}
    */
   public function access() {
-    return $this->entityTypeManager
-      ->getAccessControlHandler($this->configuration['entity_type'])
-      ->createAccess($this->configuration['bundle'], NULL, [], TRUE);
+    $accessControlHandler = $this->entityTypeManager->getAccessControlHandler($this->configuration['entity_type']);
+    if ($this->configuration['bundle'] === self::ALLOW_EDITOR_BUNDLE_SELECTION) {
+      $result = NULL;
+      foreach ($this->configuration['allowed_bundles'] as $bundle) {
+        if (!$result) {
+          $result = $accessControlHandler->createAccess($bundle, NULL, [], TRUE);
+          continue;
+        }
+        $result->orIf($accessControlHandler->createAccess($bundle, NULL, [], TRUE));
+      }
+      return $result;
+    }
+    return $accessControlHandler->createAccess($this->configuration['bundle'], NULL, [], TRUE);
   }
 
 }
diff --git a/tests/src/FunctionalJavascript/ConfigurationTest.php b/tests/src/FunctionalJavascript/ConfigurationTest.php
index 4d2b443..d4ddb0d 100644
--- a/tests/src/FunctionalJavascript/ConfigurationTest.php
+++ b/tests/src/FunctionalJavascript/ConfigurationTest.php
@@ -264,6 +264,7 @@ class ConfigurationTest extends WebDriverTestBase {
       'entity_type' => 'node',
       'bundle' => 'foo',
       'form_mode' => 'default',
+      'allowed_bundles' => [],
     ], $widgetSettings, 'Entity browser widget configuration was correctly saved.');
 
     $this->assertSession()->buttonExists("edit-table-$uuid-remove")->press();
