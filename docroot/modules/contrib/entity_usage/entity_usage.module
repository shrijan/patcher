<?php

/**
 * @file
 * Contains entity_usage.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\entity_usage\EntityUpdateManagerInterface;
use Drupal\field\FieldStorageConfigInterface;

/**
 * Implements hook_help().
 */
function entity_usage_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the entity_usage module.
    case 'help.page.entity_usage':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Track usage of entities referenced by other entities.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_insert().
 */
function entity_usage_entity_insert(EntityInterface $entity) {
  \Drupal::service('entity_usage.entity_update_manager')->trackUpdateOnCreation($entity);
}

/**
 * Implements hook_entity_update().
 */
function entity_usage_entity_update(EntityInterface $entity) {
  $entity_usage_update_manager = \Drupal::service('entity_usage.entity_update_manager');
  assert($entity_usage_update_manager instanceof EntityUpdateManagerInterface);
  $entity_usage_update_manager->trackUpdateOnEdition($entity);
}

/**
 * Implements hook_entity_predelete().
 */
function entity_usage_entity_predelete(EntityInterface $entity) {
  $entity_usage_update_manager = \Drupal::service('entity_usage.entity_update_manager');
  assert($entity_usage_update_manager instanceof EntityUpdateManagerInterface);
  $entity_usage_update_manager->trackUpdateOnDeletion($entity);
}

/**
 * Implements hook_entity_translation_delete().
 */
function entity_usage_entity_translation_delete(EntityInterface $translation) {
  $entity_usage_update_manager = \Drupal::service('entity_usage.entity_update_manager');
  assert($entity_usage_update_manager instanceof EntityUpdateManagerInterface);
  $entity_usage_update_manager->trackUpdateOnDeletion($translation, 'translation');
}

/**
 * Implements hook_entity_revision_delete().
 */
function entity_usage_entity_revision_delete(EntityInterface $entity) {
  $entity_usage_update_manager = \Drupal::service('entity_usage.entity_update_manager');
  assert($entity_usage_update_manager instanceof EntityUpdateManagerInterface);
  $entity_usage_update_manager->trackUpdateOnDeletion($entity, 'revision');
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function entity_usage_field_storage_config_delete(FieldStorageConfigInterface $field) {
  // Delete all usages tracked through this field.
  \Drupal::service('entity_usage.usage')->deleteByField($field->getTargetEntityTypeId(), $field->getName());
}

/**
 * Implements hook_form_alter().
 */
function entity_usage_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if (!method_exists($form_object, 'getEntity')) {
    return;
  }
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $form_object->getEntity();
  if (empty($entity)) {
    return;
  }
  $config = \Drupal::config('entity_usage.settings');
  $edit_entity_types = $config->get('edit_warning_message_entity_types') ?: [];
  $delete_entity_types = $config->get('delete_warning_message_entity_types') ?: [];
  // Abort early if this entity is not configured to show any message.
  if (!in_array($entity->getEntityTypeId(), $edit_entity_types) && !in_array($entity->getEntityTypeId(), $delete_entity_types)) {
    return;
  }
  $usage_data = \Drupal::service('entity_usage.usage')->listSources($entity);
  
  

  $results = getSourceVidAndSourceType($usage_data);
  
  $default_ref = false;
  $used_in_default = TRUE;
  foreach ($results as $result) {
    // Perform actions with each source_vid
    
    $entity_revision =\Drupal::entityTypeManager()
      ->getStorage($result['source_type'])
      ->loadRevision($result['source_vid']);
      //dump($entity_revision->isDefaultRevision());
    if(!empty($result['link']) && is_object($result['link']) && method_exists($result['link'], 'getText')){
      $link_text =  $result['link']->getText();
      if (contains($link_text, 'previous revision')) {
        $used_in_default = false;
      }else{
        $used_in_default = true;
      }
    }elseif(strpos($result['link'], "Orphaned") !== false){
      $used_in_default = false;
    }else{
      $used_in_default = true;
    }
    
    $storage = \Drupal::entityTypeManager()->getStorage($result['source_type']);
    //$revision_ids = $storage->load($result['source_vid']);
    $parent_type = $entity_revision->get('parent_type')->value;
    $type_storage = $result['source_type'];
    $source_id = $result['source_vid'];
    
    
    if($entity_revision->isDefaultRevision() && $used_in_default){
     
      $default_ref = true;
      break;
    }
  }

  //$test = $entity_revision->isDefaultRevision();
  // Check for the edit warning.
  if (method_exists($form_object, 'getOperation')
    && $form_object->getOperation() === 'edit'
    && in_array($entity->getEntityTypeId(), $edit_entity_types)) {
    $form['entity_usage_edit_warning'] = [
      '#theme' => 'status_messages',
      '#message_list' => [
        'warning' => [t('Modifications on this form will affect all <a href="@usage_url" target="_blank">existing usages</a> of this entity.', [
          '@usage_url' => Url::fromRoute('entity_usage.usage_list', [
            'entity_type' => $entity->getEntityTypeId(),
            'entity_id' => $entity->id(),
          ])->toString(),
        ])],
      ],
      '#status_headings' => ['warning' => t('Warning message')],
      '#weight' => -201,
    ];
  }
  // Check for the delete warning.
  elseif (in_array($entity->getEntityTypeId(), $delete_entity_types)) {
    // Even if this is not on the UI, sites can define additional form classes
    // where the delete message can be shown.
    $form_classes = $config->get('delete_warning_form_classes') ?: ['Drupal\Core\Entity\ContentEntityDeleteForm'];
    $is_delete_form = FALSE;
    foreach ($form_classes as $class) {
      if ($form_object instanceof $class) {
        $is_delete_form = TRUE;
        break;
      }
    }
    if ($is_delete_form) {
      $usage_data = \Drupal::service('entity_usage.usage')->listSources($entity);
      $entity_type = $form_object->getEntity()->getEntityType();
      $trash_url = Url::fromRoute('trash.admin_content_trash_entity_type', [
        'entity_type_id' => $entity_type->id(),
      ])->toString();
      //To get rid of 'action cannot be done' message
      $form['description']['#markup']='';
      if (!empty($usage_data) && $default_ref) {
        $form['#attached']['drupalSettings']['mediaFileDelete']['usageDataAvailable'] = TRUE;
        $form['actions']['submit']['#attributes']['disabled'] = 'disabled';
        $form['entity_usage_delete_warning'] = [
          '#theme' => 'status_messages',
          '#message_list' => [
            'warning' => [
              t('There are <a href="@usage_url" target="_blank">recorded usages</a> of this asset on this website. Please use the link provided to remove or unpublish all usages of this asset, then try again.', [
                '@usage_url' => Url::fromRoute('entity_usage.usage_list', [
                  'entity_type' => $entity->getEntityTypeId(),
                  'entity_id' => $entity->id(),
                ])->toString(),
              ])
            ],
          ],
          '#status_headings' => ['warning' => t('Warning message')],
          '#weight' => -201,
        ];
      }else{
       $form['#attached']['drupalSettings']['mediaFileDelete']['usageDataAvailable'] = FALSE;
        $form['entity_usage_delete_warning'] = [
          '#theme' => 'status_messages',
          '#message_list' => [
            'warning' => [
              t('There are no recorded usages of this asset. Once deletion is confirmed, it will be unpublished and moved to Trash. The asset can be purged or restored from the <a href="@trash_url">Trash</a> menu, otherwise it will <a href="@trash_url">automatically be deleted from Trash in 30 days</a>.', [
                '@usage_url' => Url::fromRoute('entity_usage.usage_list', [
                  'entity_type' => $entity->getEntityTypeId(),
                  'entity_id' => $entity->id(),
                ])->toString(),
                '@trash_url' => $trash_url,
              ])
            ],
          ],
          '#status_headings' => ['warning' => t('Warning message')],
          '#weight' => -201,
        ];
      }
    }
  }
}
function contains($haystack, $needle) {
  return strpos($haystack, $needle) !== false;
}
// Function to get all source_vid values from the usage_count array
function getSourceVidAndSourceType($usage_count) {
  $results = [];
  if (isset($usage_count['paragraph']) && is_array($usage_count['paragraph'])) {
    foreach ($usage_count['paragraph'] as $innerArray) {
      foreach ($innerArray as $data) {
        if (isset($data['source_vid']) && isset($data['source_type'])) {
          $results[] = [
            'source_vid' => $data['source_vid'],
            'source_type' => $data['source_type'],
            'link' => $data['link']
          ];
        }
      }
    }
  }
  return $results;
}