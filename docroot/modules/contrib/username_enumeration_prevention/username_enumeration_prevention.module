<?php

/**
 * @file
 * Main file for the Username Enumeration Prevention module.
 *
 * Adds the required functionality for removing the reset password error
 * message. Also, if views is installed restricts the callback function to work
 * only for users with the access user profiles permission.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Checks for the user password reset form and changes the validate and submit
 * functions. Uses the overridden functions defined in this module instead of
 * Drupal cores.
 */
function username_enumeration_prevention_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add uep validation handler.
  $form['#validate'][] = 'username_enumeration_prevention_pass_validate';
}

/**
 * Overrides user_pass_validate() found in user.pages.inc.
 */
function username_enumeration_prevention_pass_validate($form, FormStateInterface $form_state) {
  $name = trim($form_state->getValue('name'));

  // Try to load by email.
  $account = user_load_by_mail($name);

  if (empty($account)) {
    // No success, try to load by name.
    $account = user_load_by_name($name);
  }

  /** @var \Drupal\user\UserInterface $account */
  if ($account && $account->id() && $account->isActive()) {
    $form_state->setValueForElement(['#parents' => ['account']], $account);
  }
  else {
    \Drupal::logger('username_enumeration_prevention')->notice('Blocked user attempting to reset password.');
  }

  $form_state->set('username_enumeration_prevention_blocked', !empty($form_state->getErrors()));

  // Do not display errors with sensitive information to end-users.
  $form_errors = $form_state->getErrors();
  if (isset($form_errors['name']) && !empty($name)) {
    $form_state->clearErrors();
    unset($form_errors['name']);
    foreach ($form_errors as $name => $error_message) {
      $form_state->setErrorByName($name, $error_message);
    }
  }
}
