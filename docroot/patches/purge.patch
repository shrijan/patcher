diff --git a/docroot/modules/contrib/purge/config/schema/purge.schema.yml b/docroot/modules/contrib/purge/config/schema/purge.schema.yml
index bada222d..277f4715 100644
--- a/docroot/modules/contrib/purge/config/schema/purge.schema.yml
+++ b/docroot/modules/contrib/purge/config/schema/purge.schema.yml
@@ -1,4 +1,11 @@
  # Schema for the configuration files of the Purge module.
+purge.settings:
+  type: config_object
+  label: 'Purge settings'
+  mapping:
+    simplification_logic:
+      type: boolean
+      label: 'Enable simplification logic'
 purge.logger_channels:
  type: config_object
  label: 'Purge logger channels'
diff --git a/docroot/modules/contrib/purge/purge.api.php b/docroot/modules/contrib/purge/purge.api.php
new file mode 100644
index 00000000..171f46fc
--- /dev/null
+++ b/docroot/modules/contrib/purge/purge.api.php
@@ -0,0 +1,73 @@
+<?php
+
+/**
+ * @file
+ * Documentation of the Purge module.
+ */
+
+/**
+ * Supply additional dictionary for cache tag minification.
+ *
+ * Cache tags should be minified because most of webservers and HTTP proxies
+ * have an upper limit on HTTP header length. You can supply extra entries into
+ * the minification dictionary to gain even shorter cache tags.
+ *
+ * @return array
+ *   Additional entries for the minification dictionary. Keys should be original
+ *   substring in the cache tag whereas value should be the replaced value in
+ *   the cache tag.
+ */
+function hook_purge_cache_tag_minify_dictionary() {
+  // In this sample we would transform things like:
+  // node:1234 => n:1234
+  // config:some.config.data => c:some.config.data
+  return [
+    'node:' => 'n:',
+    'config:' => 'c:',
+  ];
+}
+
+/**
+ * Alter the dictionary for cache tag minification.
+ *
+ * @param array $dictionary
+ *   Keys should be original substring in the cache tag whereas value should be
+ *   the replaced value in the cache tag.
+ */
+function hook_purge_cache_tag_minify_dictionary_alter(array &$dictionary) {
+  // In this sample we prevent the minification of the "field" substring:
+  unset($dictionary['field']);
+}
+
+/**
+ * Supply additional dictionary for cache tags simplification.
+ *
+ * Cache tags should be simplified because most of webservers and HTTP proxies
+ * have an upper limit on HTTP header length. You can supply extra entries into
+ * the simplification dictionary to get even less cache tags.
+ *
+ * @return array
+ *   Additional entries for the simplification dictionary. Keys should be a
+ *   list cache tag whereas value should be a regex pattern matching all the
+ *   cache tags corresponding to the list cache tag.
+ */
+function hook_purge_cache_tags_simplify_dictionary() {
+  // In this sample we would transform things like:
+  // "node:1234, node_list, node:42" => "node_list"
+  return [
+    'node_list' => '/^node\:/',
+  ];
+}
+
+/**
+ * Alter the dictionary for cache tags simplification.
+ *
+ * @param array $dictionary
+ *   Keys should be a list cache tag whereas value should be a regex pattern
+ * matching all the cache tags corresponding to the list cache tag.
+ */
+function hook_purge_cache_tags_simplify_dictionary_alter(array &$dictionary) {
+  // In this sample we prevent the removing of "user:" cache tags when 'user_list'
+  // is present.
+  unset($dictionary['user_list']);
+}
diff --git a/docroot/modules/contrib/purge/purge.links.menu.yml b/docroot/modules/contrib/purge/purge.links.menu.yml
new file mode 100644
index 00000000..6d0f9dbe
--- /dev/null
+++ b/docroot/modules/contrib/purge/purge.links.menu.yml
@@ -0,0 +1,5 @@
+purge.settings_form:
+  title: Purge
+  description: Configure Purge.
+  parent: system.admin_config_system
+  route_name: purge.settings_form
\ No newline at end of file
diff --git a/docroot/modules/contrib/purge/purge.module b/docroot/modules/contrib/purge/purge.module
index 75f45446..5eeb2a7b 100644
--- a/docroot/modules/contrib/purge/purge.module
+++ b/docroot/modules/contrib/purge/purge.module
@@ -18,3 +18,44 @@ function purge_form_system_performance_settings_alter(&$form, FormStateInterface
   $form['caching']['page_cache_maximum_age']['#options'][16588800] = t("6 months");
   $form['caching']['page_cache_maximum_age']['#options'][31536000] = t("1 year (recommended for external cache invalidation)");
 }
+
+/**
+ * Implements hook_purge_cache_tag_minify_dictionary().
+ */
+function purge_purge_cache_tag_minify_dictionary() {
+  // Pretty generic replacements that should gain some reasonable reduction in
+  // header size.
+  return [
+    'menu_link_content:' => 'ml:',
+    'menu' => 'mu',
+    'media:' => 'm:',
+    'block' => 'b',
+    'config:' => 'c:',
+    'field' => 'f',
+    'file:' => 'f:',
+    'image.style.' => 'is.',
+    'node:' => 'n:',
+    'paragraph' => 'p',
+    'responsive_image.styles.' => 'ris.',
+    'system' => 's',
+    'taxonomy_term:' => 't:',
+    'user' => 'u',
+    'view' => 'v',
+  ];
+}
+
+/**
+ * Implements hook_purge_cache_tags_simplify_dictionary().
+ */
+function purge_purge_cache_tags_simplify_dictionary() {
+  // Most common list cache tags.
+  return [
+    'config:block_list' => '/^config\:block\./',
+    'menu_link_content_list' => '/^menu_link_content\:/',
+    'media_list' => '/^media\:/',
+    'node_list' => '/^node\:/',
+    'file_list' => '/^file\:/',
+    'taxonomy_term_list' => '/^taxonomy_term\:/',
+    'user_list' => '/^user\:/',
+  ];
+}
\ No newline at end of file
diff --git a/docroot/modules/contrib/purge/purge.routing.yml b/docroot/modules/contrib/purge/purge.routing.yml
new file mode 100644
index 00000000..286a6dc2
--- /dev/null
+++ b/docroot/modules/contrib/purge/purge.routing.yml
@@ -0,0 +1,7 @@
+purge.settings_form:
+  path: '/admin/config/system/purge'
+  defaults:
+    _title: 'Purge settings'
+    _form: 'Drupal\purge\Form\SettingsForm'
+  requirements:
+    _permission: 'administer site configuration'
\ No newline at end of file
diff --git a/docroot/modules/contrib/purge/purge.services.yml b/docroot/modules/contrib/purge/purge.services.yml
index b203d219..93b4e0cd 100644
--- a/docroot/modules/contrib/purge/purge.services.yml
+++ b/docroot/modules/contrib/purge/purge.services.yml
@@ -140,3 +140,46 @@ services:
     class: Drupal\purge\Plugin\Purge\TagsHeader\PluginManager
     parent: default_plugin_manager
     public: false
+  purge.cache_tag_minificator:
+    class: Drupal\purge\CacheTagMinificator
+    arguments: ['@module_handler']
+  purge_drush.debug_commands:
+    class: Drupal\purge\Drush\Commands\DebugCommands
+    arguments: ['@purge.logger']
+    tags:
+      - { name: drush.command }
+  purge_drush.diagnostics_command:
+    class: Drupal\purge\Drush\Commands\DiagnosticsCommand
+    arguments: ['@purge.diagnostics']
+    tags:
+      - { name: drush.command }
+  purge_drush.invalidate_command:
+    class: Drupal\purge\Drush\Commands\InvalidateCommand
+    arguments: ['@purge.invalidation.factory', '@purge.processors', '@purge.purgers']
+    tags:
+      - { name: drush.command }
+  purge_drush.processor_commands:
+    class: Drupal\purge\Drush\Commands\ProcessorCommands
+    arguments: ['@purge.processors']
+    tags:
+      - { name: drush.command }
+  purge_drush.purger_commands:
+    class: Drupal\purge\Drush\Commands\PurgerCommands
+    arguments: ['@purge.purgers']
+    tags:
+      - { name: drush.command }
+  purge_drush.queue_commands:
+    class: Drupal\purge\Drush\Commands\QueueCommands
+    arguments: ['@purge.processors', '@purge.purgers', '@purge.invalidation.factory', '@purge.queue', '@purge.queue.stats', '@purge.queuers']
+    tags:
+      - { name: drush.command }
+  purge_drush.queuer_commands:
+    class: Drupal\purge\Drush\Commands\QueuerCommands
+    arguments: ['@purge.queuers']
+    tags:
+      - { name: drush.command }
+  purge_drush.types_command:
+    class: Drupal\purge\Drush\Commands\TypesCommand
+    arguments: ['@purge.invalidation.factory', '@purge.purgers']
+    tags:
+      - { name: drush.command }
\ No newline at end of file
diff --git a/docroot/modules/contrib/purge/src/CacheTagMinificator.php b/docroot/modules/contrib/purge/src/CacheTagMinificator.php
new file mode 100644
index 00000000..3a750553
--- /dev/null
+++ b/docroot/modules/contrib/purge/src/CacheTagMinificator.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace Drupal\purge;
+
+/**
+ * Cache tag minificator based on static dictionary.
+ */
+class CacheTagMinificator implements CacheTagMinificatorInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function minifyCacheTag($cache_tag) {
+    $length = 4;
+    // MD5 is the fastest algorithm beyond CRC32 (which is 30% faster, but high
+    // collision risk), so this is the best bet for now. If collisions are going
+    // to be a major problem in the future, we might have to consider a hash DB.
+    $raw = hash('md5', $cache_tag, TRUE);
+    // Convert to base64url format.
+    $hash = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($raw));
+    return substr($hash, 0, $length);
+  }
+
+}
\ No newline at end of file
diff --git a/docroot/modules/contrib/purge/src/CacheTagMinificatorInterface.php b/docroot/modules/contrib/purge/src/CacheTagMinificatorInterface.php
new file mode 100644
index 00000000..7bdc2919
--- /dev/null
+++ b/docroot/modules/contrib/purge/src/CacheTagMinificatorInterface.php
@@ -0,0 +1,28 @@
+<?php
+
+namespace Drupal\purge;
+
+/**
+ * Interface of a cache tag minificator.
+ *
+ * There is an upper limit in most web-servers / proxies on HTTP header length.
+ * Thus we minify cache tags to fit as much as possible into the imposed limit.
+ */
+interface CacheTagMinificatorInterface {
+
+  /**
+   * Minify a given cache tag.
+   *
+   * Create a hash with the given input.
+   *
+   * @param string $cache_tag
+   *   Cache tag to minify.
+   *
+   * @return string
+   *   Minified cache tag.
+   *
+   * @see hook_purge_cache_tag_minify_dictionary()
+   */
+  public function minifyCacheTag($cache_tag);
+
+}
\ No newline at end of file
diff --git a/docroot/modules/contrib/purge/src/Plugin/Purge/Invalidation/TagInvalidation.php b/docroot/modules/contrib/purge/src/Plugin/Purge/Invalidation/TagInvalidation.php
index d59583a0..4ea50cb3 100644
--- a/docroot/modules/contrib/purge/src/Plugin/Purge/Invalidation/TagInvalidation.php
+++ b/docroot/modules/contrib/purge/src/Plugin/Purge/Invalidation/TagInvalidation.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\purge\Plugin\Purge\Invalidation;
 
+use Drupal\purge\CacheTagMinificatorInterface;
 use Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidExpressionException;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Describes invalidation by Drupal cache tag, e.g.: 'user:1', 'menu:footer'.
@@ -19,6 +21,42 @@ use Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidExpressionException;
  */
 class TagInvalidation extends InvalidationBase implements InvalidationInterface {
 
+  /**
+   * The cache tag minificator service.
+   *
+   * @var \Drupal\purge\CacheTagMinificatorInterface
+  */
+  protected $cacheTagMinificator;
+
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, $id, $expression, CacheTagMinificatorInterface $cache_tag_minificator) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $id, $expression);
+
+    $this->cacheTagMinificator = $cache_tag_minificator;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      [],
+      $plugin_id,
+      $plugin_definition,
+      $configuration['id'],
+      $configuration['expression'],
+      $container->get('purge.cache_tag_minificator')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __toString() {
+    $string = parent::__toString();
+
+    return $this->cacheTagMinificator->minifyCacheTag($string);
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/docroot/modules/contrib/purge/src/Plugin/Purge/TagsHeader/TagsHeaderBase.php b/docroot/modules/contrib/purge/src/Plugin/Purge/TagsHeader/TagsHeaderBase.php
index 9a84b89d..07455982 100644
--- a/docroot/modules/contrib/purge/src/Plugin/Purge/TagsHeader/TagsHeaderBase.php
+++ b/docroot/modules/contrib/purge/src/Plugin/Purge/TagsHeader/TagsHeaderBase.php
@@ -2,14 +2,40 @@
 
 namespace Drupal\purge\Plugin\Purge\TagsHeader;
 
-use Drupal\Core\Plugin\PluginBase;
+use Drupal\purge\CacheTagMinificatorInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Plugin\PluginBase;
 
 /**
  * Base implementation for plugins that add and format a cache tags header.
  */
 abstract class TagsHeaderBase extends PluginBase implements TagsHeaderInterface {
 
+  /**
+   * The cache tag minificator service.
+   *
+   * @var \Drupal\purge\CacheTagMinificatorInterface
+   */
+  protected $cacheTagMinificator;
+  
+  /**
+   * TagsHeaderBase constructor.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\purge\CacheTagMinificatorInterface $cache_tag_minificator
+   *   The cache tag minificator service.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, CacheTagMinificatorInterface $cache_tag_minificator) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+  
+    $this->cacheTagMinificator = $cache_tag_minificator;
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -17,7 +43,8 @@ abstract class TagsHeaderBase extends PluginBase implements TagsHeaderInterface
     return new static(
       $configuration,
       $plugin_id,
-      $plugin_definition
+      $plugin_definition,
+      $container->get('purge.cache_tag_minificator')
     );
   }
 
@@ -32,6 +59,7 @@ abstract class TagsHeaderBase extends PluginBase implements TagsHeaderInterface
    * {@inheritdoc}
    */
   public function getValue(array $tags) {
+    $tags = array_map([$this->cacheTagMinificator, 'minifyCacheTag'], $tags);
     return implode(' ', $tags);
   }
 
